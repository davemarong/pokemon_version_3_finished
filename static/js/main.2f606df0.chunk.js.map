{"version":3,"sources":["components/hints/Hints.js","components/context/pokemonContext.js","components/displayPokemon/DisplayPokemon.js","components/displayPokemon/HandlePokemonStats.js","components/fetchPokemon/FetchPokemonData.js","components/quessfield/UserGuess.js","components/allPokemon/AllPokemon.js","components/selectGeneration/SelectGeneration.js","components/chart/BarChart.js","App.js","index.js"],"names":["Hints","PokemonContext","React","createContext","PokemonProvider","Provider","DisplayPokemon","useContext","pokemonState","pokemonStatsState","userStatsState","pokemon","pokemonStats","userStats","setUserStats","id","name","height","img","sprites","front_default","type1","types","type","type2","idPS","namePS","heightPS","imgPS","type1PS","type2PS","totalHints","guesses","imageHints","correct","wrong","setPokemonStats","handlePokemonStatsName","handlePokemonStatsId","handlePokemonStatsHeight","handlePokemonStatsImg","handlePokemonStatsTypes1","handlePokemonStatsTypes2","HandlePokemonStats","Paper","style","marginBottom","Grid","container","direction","paddingTop","marginTop","item","xs","spacing","Button","size","variant","color","onClick","justify","Typography","align","CardMedia","width","margin","image","fetchPokemon","setPokemon","setAllPokemon","allPokemon","url","randomNumber","Math","floor","random","secondNumber","firstNumber","fullUrl","axios","get","then","result","pokemonData","data","length","UserGuess","allPokemonState","userGuessState","urlState","userGuess","setUserGuess","useState","setCorrectGuess","alignItems","TextField","label","onChange","event","target","value","pokedata","answer","console","log","handleCheckAnswer","AllPokemon","checked","setChecked","FormControlLabel","control","Switch","prev","component","map","index","Collapse","in","className","elevation","useStyles","makeStyles","theme","start","SelectGeneration","setUrl","currentGen","setCurrentGen","handleWhichGeneration","minNumber","maxNumber","handleSwitchGen","generation","classes","BarChart","labels","datasets","axis","backgroundColor","borderColor","borderWidth","App","startGame","setStartGame","Container","maxWidth","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2f606df0.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Hints() {\n  return <div></div>;\n}\n","import React from \"react\";\nconst PokemonContext = React.createContext({});\nexport const PokemonProvider = PokemonContext.Provider;\nexport default PokemonContext;\n","import React, { useState, useContext } from \"react\";\nimport PokemonContext from \"../context/pokemonContext\";\nimport HandlePokemonStats from \"./HandlePokemonStats\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Fade from \"@material-ui/core/Fade\";\nimport Paper from \"@material-ui/core/Paper\";\nexport default function DisplayPokemon() {\n  const { pokemonState, pokemonStatsState, userStatsState } = useContext(\n    PokemonContext\n  );\n  const [pokemon, setPokemon] = pokemonState;\n  const [pokemonStats, setPokemonStats] = pokemonStatsState;\n  const [userStats, setUserStats] = userStatsState;\n  const {\n    name,\n    id,\n    height,\n    sprites: { front_default: img },\n    types: [\n      {\n        type: { name: type1 },\n      },\n    ],\n    type2,\n  } = pokemon;\n  //PS = PokemonStats\n  const { namePS, idPS, heightPS, imgPS, type1PS, type2PS } = pokemonStats;\n  const { guesses, totalHints, imageHints, correct, wrong } = userStats;\n  const {\n    handlePokemonStatsName,\n    handlePokemonStatsImg,\n    handlePokemonStatsId,\n    handlePokemonStatsHeight,\n    handlePokemonStatsTypes1,\n    handlePokemonStatsTypes2,\n  } = HandlePokemonStats();\n  return (\n    <>\n      <Paper style={{ height: 230, marginBottom: 50 }}>\n        <Grid\n          container\n          direction=\"row\"\n          style={{ paddingTop: 55, marginTop: 70, marginBottom: 70 }}\n        >\n          <Grid item xs={9} container direction=\"row\" spacing={6}>\n            <Grid container>\n              <Grid item xs={2}></Grid>\n              <Grid item xs={4}>\n                <Button\n                  size=\"small\"\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={() => {\n                    handlePokemonStatsId();\n                    setUserStats({ ...userStats, totalHints: totalHints + 1 });\n                  }}\n                >\n                  Id\n                </Button>\n              </Grid>\n              <Grid container justify=\"flex-start\" item xs>\n                <div>\n                  {idPS ? (\n                    <Typography align=\"center\">{id}</Typography>\n                  ) : (\n                    <Typography align=\"center\">...</Typography>\n                  )}\n                </div>\n              </Grid>\n            </Grid>\n            <Grid container>\n              <Grid item xs={2}></Grid>\n              <Grid item xs={4}>\n                <Button\n                  size=\"small\"\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={() => {\n                    setUserStats({ ...userStats, totalHints: totalHints + 1 });\n                    handlePokemonStatsHeight();\n                  }}\n                >\n                  Height\n                </Button>\n              </Grid>\n              <Grid container justify=\"flex-start\" item xs>\n                <div>\n                  {heightPS ? (\n                    <Typography align=\"center\">{height}</Typography>\n                  ) : (\n                    <Typography align=\"center\">...</Typography>\n                  )}\n                </div>\n              </Grid>\n            </Grid>\n            <Grid container>\n              <Grid item xs={2}></Grid>\n              <Grid item xs={4}>\n                <Button\n                  size=\"small\"\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={() => {\n                    setUserStats({ ...userStats, totalHints: totalHints + 1 });\n                    handlePokemonStatsTypes1();\n                  }}\n                >\n                  Type 1\n                </Button>\n              </Grid>\n              <Grid container justify=\"flex-start\" item xs>\n                <div>\n                  {type1PS ? (\n                    <Typography align=\"center\">{type1}</Typography>\n                  ) : (\n                    <Typography align=\"center\">...</Typography>\n                  )}\n                </div>\n              </Grid>\n            </Grid>\n            <Grid container>\n              <Grid item xs={2}></Grid>\n              <Grid item xs={4}>\n                <Button\n                  size=\"small\"\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={() => {\n                    setUserStats({ ...userStats, totalHints: totalHints + 1 });\n                    handlePokemonStatsTypes2();\n                  }}\n                >\n                  Type 2\n                </Button>\n              </Grid>\n              <Grid container justify=\"flex-start\" item xs>\n                <div>\n                  {type2PS ? (\n                    <Typography align=\"center\">{type2}</Typography>\n                  ) : (\n                    <Typography align=\"center\">...</Typography>\n                  )}\n                </div>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item xs={3} container direction=\"row\">\n            <Grid\n              container\n              justify=\"flex-start\"\n              item\n              xs={12}\n              direction=\"column\"\n            >\n              <Button\n                size=\"small\"\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() => {\n                  setUserStats({\n                    ...userStats,\n                    imageHints: imageHints + 1,\n                    totalHints: totalHints + 1,\n                  });\n                  handlePokemonStatsImg();\n                }}\n              >\n                Img\n              </Button>\n            </Grid>\n            <Grid container justify=\"center\" item xs={12}>\n              {imgPS ? (\n                <CardMedia\n                  style={{ height: 100, width: 100, margin: \"auto\" }}\n                  image={img}\n                />\n              ) : (\n                <Typography\n                  align=\"center\"\n                  style={{ height: 100, width: 100, margin: \"auto\" }}\n                >\n                  ...\n                </Typography>\n              )}\n            </Grid>\n          </Grid>\n        </Grid>\n      </Paper>\n    </>\n  );\n}\n","import { useContext } from \"react\";\nimport PokemonContext from \"../context/pokemonContext\";\n\nexport default function HandlePokemonStats() {\n  const { pokemonState, pokemonStatsState } = useContext(PokemonContext);\n  const [pokemonStats, setPokemonStats] = pokemonStatsState;\n  //PS = PokemonStats\n  const { namePS, idPS, heightPS, imgPS, type1PS, type2PS } = pokemonStats;\n\n  const handlePokemonStatsName = () => {\n    setPokemonStats({ ...pokemonStats, namePS: true });\n  };\n  const handlePokemonStatsId = () => {\n    setPokemonStats({ ...pokemonStats, idPS: true });\n  };\n  const handlePokemonStatsHeight = () => {\n    setPokemonStats({ ...pokemonStats, heightPS: true });\n  };\n  const handlePokemonStatsImg = () => {\n    setPokemonStats({ ...pokemonStats, imgPS: true });\n  };\n  const handlePokemonStatsTypes1 = () => {\n    setPokemonStats({ ...pokemonStats, type1PS: true });\n  };\n  const handlePokemonStatsTypes2 = () => {\n    setPokemonStats({ ...pokemonStats, type2PS: true });\n  };\n\n  return {\n    handlePokemonStatsName,\n    handlePokemonStatsId,\n    handlePokemonStatsHeight,\n    handlePokemonStatsImg,\n    handlePokemonStatsTypes1,\n    handlePokemonStatsTypes2,\n  };\n}\n","import React, { useState, useContext } from \"react\";\nimport axios from \"axios\";\nconst fetchPokemon = (\n  pokemon,\n  setPokemon,\n  setPokemonStats,\n  setAllPokemon,\n  allPokemon,\n  url\n) => {\n  const randomNumber = Math.floor(\n    Math.random() * (url.secondNumber - url.firstNumber + 1) + url.firstNumber\n  );\n  const fullUrl = `https://pokeapi.co/api/v2/pokemon/${randomNumber}`;\n  let correct = \"correct\";\n  axios.get(fullUrl).then((result) => {\n    const pokemonData = result.data;\n    if (pokemonData.types.length === 2) {\n      setPokemon({\n        ...pokemonData,\n        type2: pokemonData.types[1].type.name,\n      });\n    } else {\n      setPokemon({ ...pokemonData, type2: \"Only 1 type\" });\n    }\n    setPokemonStats({\n      namePS: false,\n      idPS: false,\n      heightPS: false,\n      imgPS: false,\n      type1PS: false,\n      type2PS: false,\n    });\n  });\n};\nexport default fetchPokemon;\n","import React, { useState, useContext } from \"react\";\nimport PokemonContext from \"../context/pokemonContext\";\nimport fetchPokemon from \"../fetchPokemon/FetchPokemonData\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\n\nexport default function UserGuess() {\n  const {\n    pokemonState,\n    pokemonStatsState,\n    allPokemonState,\n    userGuessState,\n    userStatsState,\n    urlState,\n  } = useContext(PokemonContext);\n  const [pokemon, setPokemon] = pokemonState;\n  const [pokemonStats, setPokemonStats] = pokemonStatsState;\n  const [allPokemon, setAllPokemon] = allPokemonState;\n  const [userGuess, setUserGuess] = userGuessState;\n  const [userStats, setUserStats] = userStatsState;\n  const [url, setUrl] = urlState;\n  const { guesses, wrong, correct } = userStats;\n  const [correctGuess, setCorrectGuess] = useState(false);\n  const handleUserGuess = (event) => {\n    setUserGuess(event.target.value);\n  };\n  const handleCheckAnswer = () => {\n    if (userGuess === pokemon.name) {\n      setCorrectGuess(true);\n      setUserStats({\n        ...userStats,\n        correct: correct + 1,\n        guesses: guesses + 1,\n      });\n      let pokedata = { ...pokemon, answer: \"correct\" };\n      console.log(pokemon);\n      setAllPokemon([pokedata, ...allPokemon]);\n      fetchPokemon(\n        pokemon,\n        setPokemon,\n        setPokemonStats,\n        setAllPokemon,\n        allPokemon,\n        url\n      );\n    } else {\n      setCorrectGuess(false);\n      setUserStats({ ...userStats, wrong: wrong + 1, guesses: guesses + 1 });\n    }\n  };\n  return (\n    <div>\n      <Grid\n        style={{ marginBottom: 50 }}\n        container\n        justify=\"center\"\n        alignItems=\"center\"\n        spacing={2}\n      >\n        <Grid item>\n          <TextField\n            label=\"Who's that pokemon?\"\n            variant=\"outlined\"\n            onChange={handleUserGuess}\n            type=\"text\"\n          />\n        </Grid>\n        <Grid item>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={() => {\n              handleCheckAnswer();\n            }}\n          >\n            Submit\n          </Button>\n        </Grid>\n      </Grid>\n      {/* <div>\n        <div>{correctGuess ? <div>Correct!</div> : <br />}</div>\n      </div> */}\n    </div>\n  );\n}\n","import React, { useContext } from \"react\";\nimport PokemonContext from \"../context/pokemonContext\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport Switch from \"@material-ui/core/Switch\";\nimport zIndex from \"@material-ui/core/styles/zIndex\";\nimport Paper from \"@material-ui/core/Paper\";\n\nexport default function AllPokemon() {\n  const { allPokemonState } = useContext(PokemonContext);\n  const [allPokemon, setAllPokemon] = allPokemonState;\n  const [checked, setChecked] = React.useState(true);\n  const handleChange = () => {\n    setChecked((prev) => !prev);\n  };\n\n  const correct = {\n    background: \"green\",\n  };\n  const wrong = {\n    background: \"blue\",\n  };\n  return (\n    <div>\n      <FormControlLabel\n        control={<Switch checked={checked} onChange={handleChange} />}\n        label=\"Show previous pokemon\"\n      />\n      <Grid container justify=\"center\" component=\"div\">\n        {allPokemon.map((pokemon, index) => (\n          <Grid key={index} item>\n            <Collapse in={checked}>\n              <Paper\n                className={pokemon.answer}\n                elevation={3}\n                style={{ margin: 10 }}\n              >\n                <Typography align=\"center\">{pokemon.name}</Typography>\n                <CardMedia\n                  style={{ height: 100, width: 100, margin: \"auto\" }}\n                  image={pokemon.sprites.front_default}\n                />\n              </Paper>\n            </Collapse>\n          </Grid>\n        ))}\n      </Grid>\n    </div>\n  );\n}\n","import React, { useContext, useState } from \"react\";\nimport PokemonContext from \"../context/pokemonContext\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Switch from \"@material-ui/core/Switch\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  marginBottom: {\n    marginBottom: 100,\n  },\n  start: {\n    marginBottom: 50,\n  },\n}));\nexport default function SelectGeneration() {\n  const { urlState } = useContext(PokemonContext);\n  const [url, setUrl] = urlState;\n  const [checked, setChecked] = useState();\n  const [currentGen, setCurrentGen] = useState(\"Generation 1 is active\");\n  const handleChange = () => {\n    setChecked((prev) => !prev);\n  };\n  const handleWhichGeneration = (minNumber, maxNumber) => {\n    setUrl({ firstNumber: minNumber, secondNumber: maxNumber });\n  };\n  const handleSwitchGen = (generation) => {\n    setCurrentGen(`${generation} is active`);\n  };\n\n  const classes = useStyles();\n  return (\n    <div className={classes.start}>\n      <FormControlLabel\n        control={<Switch checked={checked} onChange={handleChange} />}\n        label=\"Switch generation\"\n      />\n      <Collapse in={checked}>\n        <Grid\n          container\n          justify=\"center\"\n          spacing={3}\n          className={classes.marginBottom}\n        >\n          <Grid item>\n            <Typography align=\"center\" component=\"h1\" variant=\"h4\">\n              Which generation is your favorite?\n            </Typography>\n          </Grid>\n          <Grid item>\n            <Button\n              onClick={() => {\n                handleWhichGeneration(1, 151);\n                handleSwitchGen(\"Generation 1\");\n              }}\n              variant=\"contained\"\n              size=\"small\"\n              color=\"primary\"\n            >\n              Gen 1\n            </Button>\n          </Grid>\n          <Grid item>\n            <Button\n              onClick={() => {\n                handleWhichGeneration(152, 251);\n                handleSwitchGen(\"Generation 2\");\n              }}\n              variant=\"contained\"\n              size=\"small\"\n              color=\"primary\"\n            >\n              Gen 2\n            </Button>\n          </Grid>\n          <Grid item>\n            <Button\n              onClick={() => {\n                handleWhichGeneration(252, 386);\n                handleSwitchGen(\"Generation 3\");\n              }}\n              variant=\"contained\"\n              size=\"small\"\n              color=\"primary\"\n            >\n              Gen 3\n            </Button>\n          </Grid>\n          <Grid item>\n            <Button\n              onClick={() => {\n                handleWhichGeneration(387, 493);\n                handleSwitchGen(\"Generation 4\");\n              }}\n              variant=\"contained\"\n              size=\"small\"\n              color=\"primary\"\n            >\n              Gen 4\n            </Button>\n          </Grid>\n          <Grid item>\n            <Button\n              onClick={() => {\n                handleWhichGeneration(494, 649);\n                handleSwitchGen(\"Generation 5\");\n              }}\n              variant=\"contained\"\n              size=\"small\"\n              color=\"primary\"\n            >\n              Gen 5\n            </Button>\n          </Grid>\n          <Grid item>\n            <Button\n              onClick={() => {\n                handleWhichGeneration(650, 721);\n                handleSwitchGen(\"Generation 6\");\n              }}\n              variant=\"contained\"\n              size=\"small\"\n              color=\"primary\"\n            >\n              Gen 6\n            </Button>\n          </Grid>\n          <Grid item>\n            <Button\n              onClick={() => {\n                handleWhichGeneration(722, 809);\n                handleSwitchGen(\"Generation 7\");\n              }}\n              variant=\"contained\"\n              size=\"small\"\n              color=\"primary\"\n            >\n              Gen 7\n            </Button>\n          </Grid>\n          <Grid item>\n            <Button\n              onClick={() => {\n                handleWhichGeneration(810, 898);\n                handleSwitchGen(\"Generation 8\");\n              }}\n              variant=\"contained\"\n              size=\"small\"\n              color=\"primary\"\n            >\n              Gen 8\n            </Button>\n          </Grid>\n          <Grid item xs={12}>\n            <Typography align=\"center\">{currentGen}</Typography>\n          </Grid>\n        </Grid>\n      </Collapse>\n    </div>\n  );\n}\n","import React, { useContext } from \"react\";\nimport PokemonContext from \"../context/pokemonContext\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Switch from \"@material-ui/core/Switch\";\nimport Collapse from \"@material-ui/core/Collapse\";\n\nimport { Bar } from \"react-chartjs-2\";\nexport default function BarChart() {\n  const { userStatsState, allPokemonState } = useContext(PokemonContext);\n  const [userStats, setUserStats] = userStatsState;\n  const [allPokemon, setAllPokemon] = allPokemonState;\n  const { guesses, totalHints, imageHints, correct, wrong } = userStats;\n  const [checked, setChecked] = React.useState(false);\n\n  const handleChange = () => {\n    setChecked((prev) => !prev);\n  };\n  const data = {\n    labels: [\n      \"Guesses\",\n      \"Wrong guesses\",\n      \"Correct guesses\",\n      \"Total hints\",\n      \"Image hints\",\n      \"Total pokemon\",\n    ],\n    datasets: [\n      {\n        axis: \"y\",\n        label: \"My statistics\",\n        backgroundColor: [\n          \"rgba(255, 99, 132, 0.2)\",\n          \"rgba(255, 159, 64, 0.2)\",\n          \"rgba(255, 205, 86, 0.2)\",\n          \"rgba(75, 192, 192, 0.2)\",\n          \"rgba(54, 162, 235, 0.2)\",\n          \"rgba(153, 102, 255, 0.2)\",\n        ],\n        borderColor: [\n          \"rgb(255, 99, 132)\",\n          \"rgb(255, 159, 64)\",\n          \"rgb(255, 205, 86)\",\n          \"rgb(75, 192, 192)\",\n          \"rgb(54, 162, 235)\",\n          \"rgb(153, 102, 255)\",\n        ],\n        borderWidth: 1,\n        data: [\n          guesses,\n          wrong,\n          correct,\n          totalHints,\n          imageHints,\n          allPokemon.length,\n        ],\n      },\n    ],\n  };\n  return (\n    <div>\n      <FormControlLabel\n        control={<Switch checked={checked} onChange={handleChange} />}\n        label=\"Show statistics chart\"\n      />\n      <Collapse in={checked}>\n        <Bar data={data} />\n      </Collapse>\n    </div>\n  );\n}\n","import \"./css/app.css\";\nimport React, { useState } from \"react\";\nimport Hints from \"./components/hints/Hints\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { PokemonProvider } from \"./components/context/pokemonContext\";\nimport DisplayPokemon from \"./components/displayPokemon/DisplayPokemon\";\nimport fetchPokemon from \"./components/fetchPokemon/FetchPokemonData\";\nimport UserGuess from \"./components/quessfield/UserGuess\";\nimport AllPokemon from \"./components/allPokemon/AllPokemon\";\nimport SelectGeneration from \"./components/selectGeneration/SelectGeneration\";\nimport Container from \"@material-ui/core/Container\";\nimport Chart from \"./components/chart/Chart\";\nimport BarChart from \"./components/chart/BarChart\";\nexport default function App() {\n  const [url, setUrl] = useState({ firstNumber: 1, secondNumber: 151 });\n  const [userGuess, setUserGuess] = useState();\n  const [userStats, setUserStats] = useState({\n    guesses: 0,\n    totalHints: 0,\n    imageHints: 0,\n    correct: 0,\n    wrong: 0,\n  });\n  const [startGame, setStartGame] = useState(false);\n  const [allPokemon, setAllPokemon] = useState([]);\n  const [pokemonStats, setPokemonStats] = useState({\n    namePS: false,\n    idPS: false,\n    heightPS: false,\n    imgPS: false,\n    type1PS: false,\n    type2PS: false,\n  });\n  const [pokemon, setPokemon] = useState({\n    name: \"\",\n    id: \"\",\n    height: \"\",\n    types: [\n      {\n        type: {\n          name: \"\",\n        },\n      },\n      {\n        type: {\n          name: \"Only 1 type\",\n        },\n      },\n    ],\n    sprites: {\n      front_default: \"\",\n    },\n  });\n  return (\n    <div>\n      <PokemonProvider\n        value={{\n          pokemonState: [pokemon, setPokemon],\n          pokemonStatsState: [pokemonStats, setPokemonStats],\n          userGuessState: [userGuess, setUserGuess],\n          allPokemonState: [allPokemon, setAllPokemon],\n          userStatsState: [userStats, setUserStats],\n          urlState: [url, setUrl],\n        }}\n      >\n        <Container maxWidth=\"sm\">\n          <Grid container justify=\"center\" spacing={4}>\n            {startGame ? (\n              <Grid item>\n                <Button\n                  size=\"large\"\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  onClick={() => {\n                    let pokedata = { ...pokemon, answer: \"wrong\" };\n                    setAllPokemon([pokedata, ...allPokemon]);\n                    fetchPokemon(\n                      pokemon,\n                      setPokemon,\n                      setPokemonStats,\n                      setAllPokemon,\n                      allPokemon,\n                      url\n                    );\n                  }}\n                >\n                  Next pokemon\n                </Button>\n              </Grid>\n            ) : (\n              <Grid item>\n                <Button\n                  size=\"large\"\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  onClick={() => {\n                    setStartGame(true);\n                    fetchPokemon(\n                      pokemon,\n                      setPokemon,\n                      setPokemonStats,\n                      setAllPokemon,\n                      allPokemon,\n                      url\n                    );\n                  }}\n                >\n                  Start\n                </Button>\n              </Grid>\n            )}\n          </Grid>\n\n          <Hints />\n          <DisplayPokemon />\n          <UserGuess />\n          <AllPokemon />\n          <BarChart />\n          <SelectGeneration />\n        </Container>\n      </PokemonProvider>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}