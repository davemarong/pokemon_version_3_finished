{"version":3,"sources":["components/hints/Hints.js","components/context/pokemonContext.js","components/displayPokemon/DisplayPokemon.js","components/displayPokemon/HandlePokemonStats.js","components/fetchPokemon/FetchPokemonData.js","components/quessfield/UserGuess.js","components/allPokemon/AllPokemon.js","components/selectGeneration/SelectGeneration.js","components/chart/BarChart.js","App.js","index.js"],"names":["Hints","PokemonContext","React","createContext","PokemonProvider","Provider","DisplayPokemon","useContext","pokemonState","pokemonStatsState","userStatsState","animationState","pokemon","pokemonStats","userStats","setUserStats","animation","id","name","height","img","sprites","front_default","type1","types","type","type2","idPS","namePS","heightPS","imgPS","type1PS","type2PS","totalHints","guesses","imageHints","correct","wrong","setPokemonStats","handlePokemonStatsName","handlePokemonStatsId","handlePokemonStatsHeight","handlePokemonStatsImg","handlePokemonStatsTypes1","handlePokemonStatsTypes2","HandlePokemonStats","useCycle","capitalizeFirstLetter","string","charAt","toUpperCase","slice","Container","maxWidth","Typography","align","variant","motion","div","variants","animationOne","rotate","transition","duration","animationTwo","animate","Paper","Grid","className","container","direction","style","paddingTop","paddingBottom","marginTop","marginBottom","item","xs","spacing","Button","size","color","onClick","justify","CardMedia","width","margin","image","fetchPokemon","setPokemon","setAllPokemon","allPokemon","url","cycleAnimation","randomNumber","Math","floor","random","secondNumber","firstNumber","fullUrl","axios","get","then","result","pokemonData","data","length","UserGuess","allPokemonState","userGuessState","urlState","userGuess","setUserGuess","useState","setCorrectGuess","useSnackbar","enqueueSnackbar","closeSnackbar","alignItems","TextField","label","onChange","event","target","value","toLowerCase","autoHideDuration","pokedata","answer","handleCheckAnswer","AllPokemon","checked","setChecked","Card","textAlign","FormControlLabel","control","Switch","prev","component","map","index","Collapse","in","elevation","useStyles","makeStyles","theme","start","SelectGeneration","setUrl","currentGen","setCurrentGen","handleWhichGeneration","minNumber","maxNumber","handleSwitchGen","generation","classes","BarChart","labels","datasets","axis","backgroundColor","borderColor","borderWidth","App","setStartGame","useEffect","maxSnack","anchorOrigin","vertical","horizontal","TransitionComponent","Slide","whileTap","scale","endIcon","alignContent","md","paddingLeft","paddingRight","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e30e46cd.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Hints() {\n  return <div></div>;\n}\n","import React from \"react\";\nconst PokemonContext = React.createContext({});\nexport const PokemonProvider = PokemonContext.Provider;\nexport default PokemonContext;\n","import React, { useState, useContext } from \"react\";\nimport PokemonContext from \"../context/pokemonContext\";\nimport HandlePokemonStats from \"./HandlePokemonStats\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Fade from \"@material-ui/core/Fade\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { motion, useCycle } from \"framer-motion\";\nimport { Card, Container } from \"@material-ui/core\";\n\nexport default function DisplayPokemon() {\n  const {\n    pokemonState,\n    pokemonStatsState,\n    userStatsState,\n    animationState,\n  } = useContext(PokemonContext);\n  const [pokemon, setPokemon] = pokemonState;\n  const [pokemonStats, setPokemonStats] = pokemonStatsState;\n  const [userStats, setUserStats] = userStatsState;\n  const [animation, cycleAnimation] = animationState;\n  const {\n    name,\n    id,\n    height,\n    sprites: { front_default: img },\n    types: [\n      {\n        type: { name: type1 },\n      },\n    ],\n    type2,\n  } = pokemon;\n  //PS = PokemonStats\n  const { namePS, idPS, heightPS, imgPS, type1PS, type2PS } = pokemonStats;\n  const { guesses, totalHints, imageHints, correct, wrong } = userStats;\n  const {\n    handlePokemonStatsName,\n    handlePokemonStatsImg,\n    handlePokemonStatsId,\n    handlePokemonStatsHeight,\n    handlePokemonStatsTypes1,\n    handlePokemonStatsTypes2,\n  } = HandlePokemonStats();\n  const [idAnimation, cycleIdAnimation] = useCycle(\n    \"hintAnimation1\",\n    \"hintAnimation2\"\n  );\n  const displayContainerVariants = {\n    animationOne: {\n      rotate: 360,\n      transition: {\n        duration: 0.3,\n      },\n    },\n    animationTwo: {\n      rotate: 0,\n      transition: {\n        duration: 0.3,\n      },\n    },\n  };\n\n  const capitalizeFirstLetter = (string) =>\n    string.charAt(0).toUpperCase() + string.slice(1);\n\n  return (\n    <>\n      <Container maxWidth=\"sm\">\n        <Typography align=\"center\" variant=\"h5\">\n          Step 1: Choose your hints\n        </Typography>\n        <motion.div variants={displayContainerVariants} animate={animation}>\n          <Paper>\n            <Grid\n              className=\"container\"\n              container\n              direction=\"row\"\n              style={{\n                paddingTop: 40,\n                paddingBottom: 40,\n                marginTop: 30,\n                marginBottom: 30,\n              }}\n            >\n              <Grid item xs={9} container direction=\"row\" spacing={6}>\n                <Grid container>\n                  <Grid item xs={2}></Grid>\n                  <Grid item xs={4}>\n                    <Button\n                      size=\"small\"\n                      variant=\"contained\"\n                      color=\"primary\"\n                      className=\"hint_button\"\n                      onClick={() => {\n                        handlePokemonStatsId();\n                        setUserStats({\n                          ...userStats,\n                          totalHints: totalHints + 1,\n                        });\n                      }}\n                    >\n                      Id\n                    </Button>\n                  </Grid>\n                  <Grid container justify=\"flex-start\" item xs>\n                    <div>\n                      {idPS ? (\n                        <Typography align=\"center\">{id}</Typography>\n                      ) : (\n                        <Typography align=\"center\">...</Typography>\n                      )}\n                    </div>\n                  </Grid>\n                </Grid>\n                <Grid container>\n                  <Grid item xs={2}></Grid>\n                  <Grid item xs={4}>\n                    <Button\n                      className=\"hint_button\"\n                      size=\"small\"\n                      variant=\"contained\"\n                      color=\"primary\"\n                      onClick={() => {\n                        setUserStats({\n                          ...userStats,\n                          totalHints: totalHints + 1,\n                        });\n                        handlePokemonStatsHeight();\n                      }}\n                    >\n                      Height\n                    </Button>\n                  </Grid>\n                  <Grid container justify=\"flex-start\" item xs>\n                    <div>\n                      {heightPS ? (\n                        <Typography align=\"center\">{height}</Typography>\n                      ) : (\n                        <Typography align=\"center\">...</Typography>\n                      )}\n                    </div>\n                  </Grid>\n                </Grid>\n                <Grid container>\n                  <Grid item xs={2}></Grid>\n                  <Grid item xs={4}>\n                    <Button\n                      className=\"hint_button\"\n                      size=\"small\"\n                      variant=\"contained\"\n                      color=\"primary\"\n                      onClick={() => {\n                        setUserStats({\n                          ...userStats,\n                          totalHints: totalHints + 1,\n                        });\n                        handlePokemonStatsTypes1();\n                      }}\n                    >\n                      Type 1\n                    </Button>\n                  </Grid>\n                  <Grid container justify=\"flex-start\" item xs>\n                    <div>\n                      {type1PS ? (\n                        <Typography align=\"center\">\n                          {capitalizeFirstLetter(type1)}\n                        </Typography>\n                      ) : (\n                        <Typography align=\"center\">...</Typography>\n                      )}\n                    </div>\n                  </Grid>\n                </Grid>\n                <Grid container>\n                  <Grid item xs={2}></Grid>\n                  <Grid item xs={4}>\n                    <Button\n                      className=\"hint_button\"\n                      size=\"small\"\n                      variant=\"contained\"\n                      color=\"primary\"\n                      onClick={() => {\n                        setUserStats({\n                          ...userStats,\n                          totalHints: totalHints + 1,\n                        });\n                        handlePokemonStatsTypes2();\n                      }}\n                    >\n                      Type 2\n                    </Button>\n                  </Grid>\n                  <Grid container justify=\"flex-start\" item xs>\n                    <div>\n                      {type2PS ? (\n                        <Typography align=\"center\">\n                          {capitalizeFirstLetter(type2)}\n                        </Typography>\n                      ) : (\n                        <Typography align=\"center\">...</Typography>\n                      )}\n                    </div>\n                  </Grid>\n                </Grid>\n              </Grid>\n              <Grid item xs={3} container direction=\"row\">\n                <Grid\n                  container\n                  justify=\"flex-start\"\n                  item\n                  xs={12}\n                  direction=\"column\"\n                >\n                  <Button\n                    className=\"hint_button imgHint\"\n                    size=\"small\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => {\n                      setUserStats({\n                        ...userStats,\n                        imageHints: imageHints + 1,\n                        totalHints: totalHints + 1,\n                      });\n                      handlePokemonStatsImg();\n                    }}\n                  >\n                    Img\n                  </Button>\n                </Grid>\n                <Grid container justify=\"center\" item xs={12}>\n                  {imgPS ? (\n                    <CardMedia\n                      style={{ height: 100, width: 100, margin: \"auto\" }}\n                      image={img}\n                    />\n                  ) : (\n                    <Typography\n                      align=\"center\"\n                      style={{ height: 100, width: 100, margin: \"auto\" }}\n                    >\n                      ...\n                    </Typography>\n                  )}\n                </Grid>\n              </Grid>\n            </Grid>\n          </Paper>\n        </motion.div>\n      </Container>\n    </>\n  );\n}\n","import { useContext } from \"react\";\nimport PokemonContext from \"../context/pokemonContext\";\n\nexport default function HandlePokemonStats() {\n  const { pokemonState, pokemonStatsState } = useContext(PokemonContext);\n  const [pokemonStats, setPokemonStats] = pokemonStatsState;\n  //PS = PokemonStats\n  const { namePS, idPS, heightPS, imgPS, type1PS, type2PS } = pokemonStats;\n\n  const handlePokemonStatsName = () => {\n    setPokemonStats({ ...pokemonStats, namePS: true });\n  };\n  const handlePokemonStatsId = () => {\n    setPokemonStats({ ...pokemonStats, idPS: true });\n  };\n  const handlePokemonStatsHeight = () => {\n    setPokemonStats({ ...pokemonStats, heightPS: true });\n  };\n  const handlePokemonStatsImg = () => {\n    setPokemonStats({ ...pokemonStats, imgPS: true });\n  };\n  const handlePokemonStatsTypes1 = () => {\n    setPokemonStats({ ...pokemonStats, type1PS: true });\n  };\n  const handlePokemonStatsTypes2 = () => {\n    setPokemonStats({ ...pokemonStats, type2PS: true });\n  };\n\n  return {\n    handlePokemonStatsName,\n    handlePokemonStatsId,\n    handlePokemonStatsHeight,\n    handlePokemonStatsImg,\n    handlePokemonStatsTypes1,\n    handlePokemonStatsTypes2,\n  };\n}\n","import React, { useState, useContext } from \"react\";\nimport axios from \"axios\";\nimport { motion } from \"framer-motion\";\n\nconst fetchPokemon = (\n  pokemon,\n  setPokemon,\n  setPokemonStats,\n  setAllPokemon,\n  allPokemon,\n  url,\n  cycleAnimation\n) => {\n  const randomNumber = Math.floor(\n    Math.random() * (url.secondNumber - url.firstNumber + 1) + url.firstNumber\n  );\n  const fullUrl = `https://pokeapi.co/api/v2/pokemon/${randomNumber}`;\n  let correct = \"correct\";\n  axios.get(fullUrl).then((result) => {\n    const pokemonData = result.data;\n    if (pokemonData.types.length === 2) {\n      setPokemon({\n        ...pokemonData,\n        type2: pokemonData.types[1].type.name,\n      });\n    } else {\n      setPokemon({ ...pokemonData, type2: \"Only 1 type\" });\n    }\n    setPokemonStats({\n      namePS: false,\n      idPS: false,\n      heightPS: false,\n      imgPS: false,\n      type1PS: false,\n      type2PS: false,\n    });\n    cycleAnimation();\n  });\n};\nexport default fetchPokemon;\n","import React, { useState, useContext } from \"react\";\nimport PokemonContext from \"../context/pokemonContext\";\nimport fetchPokemon from \"../fetchPokemon/FetchPokemonData\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { useSnackbar } from \"notistack\";\nimport { motion, useCycle } from \"framer-motion\";\nimport { Card, Container } from \"@material-ui/core\";\nexport default function UserGuess() {\n  const {\n    pokemonState,\n    pokemonStatsState,\n    allPokemonState,\n    userGuessState,\n    userStatsState,\n    urlState,\n    animationState,\n  } = useContext(PokemonContext);\n  const [pokemon, setPokemon] = pokemonState;\n  const [pokemonStats, setPokemonStats] = pokemonStatsState;\n  const [allPokemon, setAllPokemon] = allPokemonState;\n  const [userGuess, setUserGuess] = userGuessState;\n  const [userStats, setUserStats] = userStatsState;\n  const [url, setUrl] = urlState;\n  const [animation, cycleAnimation] = animationState;\n\n  const { guesses, wrong, correct } = userStats;\n  const [correctGuess, setCorrectGuess] = useState(false);\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const handleUserGuess = (event) => {\n    setUserGuess(event.target.value);\n  };\n  const handleClick = () => {\n    enqueueSnackbar(\"I love hooks\");\n  };\n  const handleCheckAnswer = () => {\n    if (userGuess) {\n      if (userGuess.toLowerCase() === pokemon.name) {\n        setCorrectGuess(true);\n        enqueueSnackbar(\"Thats correct!\", {\n          variant: \"success\",\n          autoHideDuration: 3000,\n        });\n        setUserStats({\n          ...userStats,\n          correct: correct + 1,\n          guesses: guesses + 1,\n        });\n        let pokedata = { ...pokemon, answer: \"correct\" };\n        setAllPokemon([pokedata, ...allPokemon]);\n        fetchPokemon(\n          pokemon,\n          setPokemon,\n          setPokemonStats,\n          setAllPokemon,\n          allPokemon,\n          url,\n          cycleAnimation\n        );\n        setUserGuess(\"\");\n      } else {\n        enqueueSnackbar(\"Wrong\", { variant: \"error\", autoHideDuration: 1000 });\n        setCorrectGuess(false);\n        setUserStats({ ...userStats, wrong: wrong + 1, guesses: guesses + 1 });\n      }\n    }\n  };\n  return (\n    <div>\n      <Container maxWidth=\"sm\">\n        <Typography align=\"center\" variant=\"h5\">\n          Step 2: Guess which pokemon\n        </Typography>\n\n        <Paper>\n          <Grid\n            className=\"container\"\n            style={{\n              height: 210,\n              paddingTop: 40,\n              paddingBottom: 40,\n              marginTop: 30,\n              marginBottom: 30,\n            }}\n            container\n            direction=\"row\"\n            justify=\"center\"\n            alignItems=\"center\"\n            spacing={2}\n          >\n            <Grid item>\n              <TextField\n                label=\"Who's that pokemon?\"\n                variant=\"outlined\"\n                onChange={handleUserGuess}\n                type=\"text\"\n                value={userGuess}\n              />\n            </Grid>\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                className=\"main_button\"\n                color=\"secondary\"\n                onClick={() => {\n                  handleCheckAnswer();\n                }}\n              >\n                Submit\n              </Button>\n            </Grid>\n          </Grid>\n          {/* <div>\n        <div>{correctGuess ? <div>Correct!</div> : <br />}</div>\n      </div> */}\n        </Paper>\n      </Container>\n    </div>\n  );\n}\n","import React, { useContext } from \"react\";\nimport PokemonContext from \"../context/pokemonContext\";\nimport Card from \"@material-ui/core/Card\";\nimport Container from \"@material-ui/core/Container\";\n\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport Switch from \"@material-ui/core/Switch\";\nimport zIndex from \"@material-ui/core/styles/zIndex\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { motion } from \"framer-motion\";\n\nexport default function AllPokemon() {\n  const { allPokemonState } = useContext(PokemonContext);\n  const [allPokemon, setAllPokemon] = allPokemonState;\n  const [checked, setChecked] = React.useState(true);\n  const handleChange = () => {\n    setChecked((prev) => !prev);\n  };\n\n  function capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  }\n  return (\n    <Container maxWidth=\"sm\">\n      <Card>\n        <div\n          style={{ textAlign: \"center\" }}\n          className=\"container scrollAllPokemon\"\n        >\n          <FormControlLabel\n            control={<Switch checked={checked} onChange={handleChange} />}\n            label=\"Show previous pokemon\"\n          />\n          <Grid container justify=\"center\" component=\"div\">\n            {allPokemon.map((pokemon, index) => (\n              <Grid key={index} item>\n                <Collapse in={checked}>\n                  <Paper\n                    className={pokemon.answer}\n                    elevation={3}\n                    style={{ margin: 10 }}\n                  >\n                    <Typography align=\"center\">\n                      {capitalizeFirstLetter(pokemon.name)}\n                    </Typography>\n                    <CardMedia\n                      style={{ height: 100, width: 100, margin: \"auto\" }}\n                      image={pokemon.sprites.front_default}\n                    />\n                  </Paper>\n                </Collapse>\n              </Grid>\n            ))}\n          </Grid>\n        </div>\n      </Card>\n    </Container>\n  );\n}\n","import React, { useContext, useState } from \"react\";\nimport PokemonContext from \"../context/pokemonContext\";\nimport Card from \"@material-ui/core/Card\";\nimport Container from \"@material-ui/core/Container\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Switch from \"@material-ui/core/Switch\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  marginBottom: {\n    marginBottom: 10,\n  },\n  start: {\n    textAlign: \"center\",\n  },\n}));\nexport default function SelectGeneration() {\n  const { urlState } = useContext(PokemonContext);\n  const [url, setUrl] = urlState;\n  const [checked, setChecked] = useState(true);\n  const [currentGen, setCurrentGen] = useState(\"Generation 1 is active\");\n  const handleChange = () => {\n    setChecked((prev) => !prev);\n  };\n  const handleWhichGeneration = (minNumber, maxNumber) => {\n    setUrl({ firstNumber: minNumber, secondNumber: maxNumber });\n  };\n  const handleSwitchGen = (generation) => {\n    setCurrentGen(`${generation} is active`);\n  };\n\n  const classes = useStyles();\n  return (\n    <Container maxWidth=\"sm\">\n      <Card>\n        <div className=\"container\">\n          <FormControlLabel\n            control={<Switch checked={checked} onChange={handleChange} />}\n            label=\"Switch generation\"\n          />\n          <Collapse in={checked}>\n            <Grid\n              container\n              justify=\"center\"\n              spacing={3}\n              className={classes.marginBottom}\n            >\n              <Grid item>\n                <Button\n                  onClick={() => {\n                    handleWhichGeneration(1, 151);\n                    handleSwitchGen(\"Generation 1\");\n                  }}\n                  className=\"hint_button\"\n                  variant=\"contained\"\n                  size=\"small\"\n                  color=\"primary\"\n                >\n                  Gen 1\n                </Button>\n              </Grid>\n              <Grid item>\n                <Button\n                  onClick={() => {\n                    handleWhichGeneration(152, 251);\n                    handleSwitchGen(\"Generation 2\");\n                  }}\n                  className=\"hint_button\"\n                  variant=\"contained\"\n                  size=\"small\"\n                  color=\"primary\"\n                >\n                  Gen 2\n                </Button>\n              </Grid>\n              <Grid item>\n                <Button\n                  onClick={() => {\n                    handleWhichGeneration(252, 386);\n                    handleSwitchGen(\"Generation 3\");\n                  }}\n                  className=\"hint_button\"\n                  variant=\"contained\"\n                  size=\"small\"\n                  color=\"primary\"\n                >\n                  Gen 3\n                </Button>\n              </Grid>\n              <Grid item>\n                <Button\n                  onClick={() => {\n                    handleWhichGeneration(387, 493);\n                    handleSwitchGen(\"Generation 4\");\n                  }}\n                  className=\"hint_button\"\n                  variant=\"contained\"\n                  size=\"small\"\n                  color=\"primary\"\n                >\n                  Gen 4\n                </Button>\n              </Grid>\n              <Grid item>\n                <Button\n                  onClick={() => {\n                    handleWhichGeneration(494, 649);\n                    handleSwitchGen(\"Generation 5\");\n                  }}\n                  className=\"hint_button\"\n                  variant=\"contained\"\n                  size=\"small\"\n                  color=\"primary\"\n                >\n                  Gen 5\n                </Button>\n              </Grid>\n              <Grid item>\n                <Button\n                  onClick={() => {\n                    handleWhichGeneration(650, 721);\n                    handleSwitchGen(\"Generation 6\");\n                  }}\n                  className=\"hint_button\"\n                  variant=\"contained\"\n                  size=\"small\"\n                  color=\"primary\"\n                >\n                  Gen 6\n                </Button>\n              </Grid>\n              <Grid item>\n                <Button\n                  onClick={() => {\n                    handleWhichGeneration(722, 809);\n                    handleSwitchGen(\"Generation 7\");\n                  }}\n                  className=\"hint_button\"\n                  variant=\"contained\"\n                  size=\"small\"\n                  color=\"primary\"\n                >\n                  Gen 7\n                </Button>\n              </Grid>\n              <Grid item>\n                <Button\n                  onClick={() => {\n                    handleWhichGeneration(810, 898);\n                    handleSwitchGen(\"Generation 8\");\n                  }}\n                  className=\"hint_button\"\n                  variant=\"contained\"\n                  size=\"small\"\n                  color=\"primary\"\n                >\n                  Gen 8\n                </Button>\n              </Grid>\n              <Grid item xs={12}>\n                <Typography align=\"center\">{currentGen}</Typography>\n              </Grid>\n            </Grid>\n          </Collapse>\n        </div>\n      </Card>\n    </Container>\n  );\n}\n","import React, { useState, useContext } from \"react\";\nimport PokemonContext from \"../context/pokemonContext\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Switch from \"@material-ui/core/Switch\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport Card from \"@material-ui/core/Card\";\nimport Container from \"@material-ui/core/Container\";\nimport { Bar } from \"react-chartjs-2\";\nexport default function BarChart() {\n  const { userStatsState, allPokemonState } = useContext(PokemonContext);\n  const [userStats, setUserStats] = userStatsState;\n  const [allPokemon, setAllPokemon] = allPokemonState;\n  const { guesses, totalHints, imageHints, correct, wrong } = userStats;\n  const [checked, setChecked] = useState(true);\n\n  const handleChange = () => {\n    setChecked((prev) => !prev);\n  };\n  const data = {\n    labels: [\n      \"Guesses\",\n      \"Wrong guesses\",\n      \"Correct guesses\",\n      \"Total hints\",\n      \"Image hints\",\n      \"Total pokemon\",\n    ],\n    datasets: [\n      {\n        axis: \"y\",\n        label: \"My statistics\",\n        backgroundColor: [\n          \"rgba(255, 99, 132, 0.2)\",\n          \"rgba(255, 159, 64, 0.2)\",\n          \"rgba(255, 205, 86, 0.2)\",\n          \"rgba(75, 192, 192, 0.2)\",\n          \"rgba(54, 162, 235, 0.2)\",\n          \"rgba(153, 102, 255, 0.2)\",\n        ],\n        borderColor: [\n          \"rgb(255, 99, 132)\",\n          \"rgb(255, 159, 64)\",\n          \"rgb(255, 205, 86)\",\n          \"rgb(75, 192, 192)\",\n          \"rgb(54, 162, 235)\",\n          \"rgb(153, 102, 255)\",\n        ],\n        borderWidth: 1,\n        data: [\n          guesses,\n          wrong,\n          correct,\n          totalHints,\n          imageHints,\n          allPokemon.length,\n        ],\n      },\n    ],\n  };\n  return (\n    <Container maxWidth=\"sm\">\n      <Card>\n        <div style={{ textAlign: \"center\" }} className=\"container\">\n          <FormControlLabel\n            control={<Switch checked={checked} onChange={handleChange} />}\n            label=\"Show statistics chart\"\n          />\n          <Collapse in={checked}>\n            <Bar data={data} />\n          </Collapse>\n        </div>\n      </Card>\n    </Container>\n  );\n}\n","import \"./css/app.css\";\n\nimport React, { useState, useEffect } from \"react\";\nimport Hints from \"./components/hints/Hints\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { PokemonProvider } from \"./components/context/pokemonContext\";\nimport DisplayPokemon from \"./components/displayPokemon/DisplayPokemon\";\nimport fetchPokemon from \"./components/fetchPokemon/FetchPokemonData\";\nimport UserGuess from \"./components/quessfield/UserGuess\";\nimport AllPokemon from \"./components/allPokemon/AllPokemon\";\nimport SelectGeneration from \"./components/selectGeneration/SelectGeneration\";\nimport Container from \"@material-ui/core/Container\";\nimport BarChart from \"./components/chart/BarChart\";\nimport ArrowForwardRoundedIcon from \"@material-ui/icons/ArrowForwardRounded\";\nimport { motion, useCycle } from \"framer-motion\";\nimport { SnackbarProvider } from \"notistack\";\nimport Slide from \"@material-ui/core/Slide\";\n\nexport default function App() {\n  const [animation, cycleAnimation] = useCycle(\"animationOne\", \"animationTwo\");\n  const [url, setUrl] = useState({ firstNumber: 1, secondNumber: 151 });\n  const [userGuess, setUserGuess] = useState();\n  const [userStats, setUserStats] = useState({\n    guesses: 0,\n    totalHints: 0,\n    imageHints: 0,\n    correct: 0,\n    wrong: 0,\n  });\n  const [startGame, setStartGame] = useState(false);\n  const [allPokemon, setAllPokemon] = useState([]);\n  const [pokemonStats, setPokemonStats] = useState({\n    namePS: false,\n    idPS: false,\n    heightPS: false,\n    imgPS: false,\n    type1PS: false,\n    type2PS: false,\n  });\n  const [pokemon, setPokemon] = useState({\n    name: \"\",\n    id: \"\",\n    height: \"\",\n    types: [\n      {\n        type: {\n          name: \"\",\n        },\n      },\n      {\n        type: {\n          name: \"Only 1 type\",\n        },\n      },\n    ],\n    sprites: {\n      front_default: \"\",\n    },\n  });\n  useEffect(() => {\n    setStartGame(true);\n    fetchPokemon(\n      pokemon,\n      setPokemon,\n      setPokemonStats,\n      setAllPokemon,\n      allPokemon,\n      url,\n      cycleAnimation\n    );\n  }, []);\n  return (\n    <div className=\"background\">\n      <PokemonProvider\n        value={{\n          pokemonState: [pokemon, setPokemon],\n          pokemonStatsState: [pokemonStats, setPokemonStats],\n          userGuessState: [userGuess, setUserGuess],\n          allPokemonState: [allPokemon, setAllPokemon],\n          userStatsState: [userStats, setUserStats],\n          urlState: [url, setUrl],\n          animationState: [animation, cycleAnimation],\n        }}\n      >\n        <SnackbarProvider\n          maxSnack={3}\n          anchorOrigin={{\n            vertical: \"bottom\",\n            horizontal: \"center\",\n          }}\n          TransitionComponent={Slide}\n        >\n          <Grid container justify=\"center\" spacing={0}>\n            <Grid item>\n              <Button\n                className=\"main_button marginButton\"\n                component={motion.div}\n                whileTap={{ scale: 1.2 }}\n                size=\"large\"\n                variant=\"contained\"\n                color=\"secondary\"\n                endIcon={<ArrowForwardRoundedIcon />}\n                onClick={() => {\n                  let pokedata = { ...pokemon, answer: \"wrong\" };\n                  fetchPokemon(\n                    pokemon,\n                    setPokemon,\n                    setPokemonStats,\n                    setAllPokemon,\n                    allPokemon,\n                    url,\n                    cycleAnimation\n                  );\n                  setAllPokemon([pokedata, ...allPokemon]);\n                }}\n              >\n                Next pokemon\n              </Button>\n            </Grid>\n          </Grid>\n\n          <Hints />\n          <Grid\n            container\n            direction=\"row\"\n            justify=\"center\"\n            alignContent=\"center\"\n            alignItems=\"center\"\n            spacing={0}\n          >\n            <Grid item xs={12} md={6}>\n              <DisplayPokemon />\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <UserGuess />\n            </Grid>\n            <Grid\n              container\n              direction=\"row\"\n              justify=\"flex-start\"\n              alignContent=\"flex-start\"\n              alignItems=\"flex-start\"\n            >\n              <Grid\n                container\n                justify=\"center\"\n                item\n                xs={12}\n                md={4}\n                style={{\n                  paddingLeft: 16,\n                  paddingRight: 16,\n                  marginTop: 20,\n                  marginBottom: 20,\n                }}\n              >\n                <AllPokemon />\n              </Grid>\n              <Grid\n                container\n                justify=\"center\"\n                item\n                xs={12}\n                md={4}\n                style={{\n                  paddingLeft: 16,\n                  paddingRight: 16,\n                  marginTop: 20,\n                  marginBottom: 20,\n                }}\n              >\n                <BarChart />\n              </Grid>\n              <Grid\n                container\n                justify=\"center\"\n                item\n                xs={12}\n                md={4}\n                style={{\n                  paddingLeft: 16,\n                  paddingRight: 16,\n                  marginTop: 20,\n                  marginBottom: 20,\n                }}\n              >\n                <SelectGeneration />\n              </Grid>\n            </Grid>\n          </Grid>\n          {/* </Container> */}\n        </SnackbarProvider>\n      </PokemonProvider>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}