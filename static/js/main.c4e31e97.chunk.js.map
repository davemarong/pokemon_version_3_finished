{"version":3,"sources":["components/hints/Hints.js","components/context/pokemonContext.js","components/displayPokemon/DisplayPokemon.js","components/displayPokemon/HandlePokemonStats.js","components/fetchPokemon/FetchPokemonData.js","components/quessfield/UserGuess.js","components/allPokemon/AllPokemon.js","components/selectGeneration/SelectGeneration.js","components/chart/BarChart.js","App.js","index.js"],"names":["Hints","PokemonContext","React","createContext","PokemonProvider","Provider","DisplayPokemon","useContext","pokemonState","pokemonStatsState","userStatsState","animationState","pokemon","pokemonStats","userStats","setUserStats","animation","id","name","height","img","sprites","front_default","type1","types","type","type2","idPS","namePS","heightPS","imgPS","type1PS","type2PS","totalHints","guesses","imageHints","correct","wrong","setPokemonStats","handlePokemonStatsName","handlePokemonStatsId","handlePokemonStatsHeight","handlePokemonStatsImg","handlePokemonStatsTypes1","handlePokemonStatsTypes2","HandlePokemonStats","capitalizeFirstLetter","string","charAt","toUpperCase","slice","motion","div","variants","animationOne","rotate","transition","duration","animationTwo","animate","Paper","style","marginBottom","Grid","container","direction","paddingTop","marginTop","item","xs","spacing","Button","size","variant","color","onClick","justify","Typography","align","CardMedia","width","margin","image","fetchPokemon","setPokemon","setAllPokemon","allPokemon","url","cycleAnimation","randomNumber","Math","floor","random","secondNumber","firstNumber","fullUrl","axios","get","then","result","pokemonData","data","length","UserGuess","allPokemonState","userGuessState","urlState","userGuess","setUserGuess","useState","setCorrectGuess","alignItems","TextField","label","onChange","event","target","value","toLowerCase","pokedata","answer","handleCheckAnswer","AllPokemon","checked","setChecked","FormControlLabel","control","Switch","prev","component","map","index","Collapse","in","className","elevation","useStyles","makeStyles","theme","start","SelectGeneration","setUrl","currentGen","setCurrentGen","handleWhichGeneration","minNumber","maxNumber","handleSwitchGen","generation","classes","BarChart","labels","datasets","axis","backgroundColor","borderColor","borderWidth","App","useCycle","startGame","setStartGame","Container","maxWidth","whileTap","scale","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c4e31e97.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Hints() {\n  return <div></div>;\n}\n","import React from \"react\";\nconst PokemonContext = React.createContext({});\nexport const PokemonProvider = PokemonContext.Provider;\nexport default PokemonContext;\n","import React, { useState, useContext } from \"react\";\nimport PokemonContext from \"../context/pokemonContext\";\nimport HandlePokemonStats from \"./HandlePokemonStats\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Fade from \"@material-ui/core/Fade\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { motion } from \"framer-motion\";\n\nexport default function DisplayPokemon() {\n  const {\n    pokemonState,\n    pokemonStatsState,\n    userStatsState,\n    animationState,\n  } = useContext(PokemonContext);\n  const [pokemon, setPokemon] = pokemonState;\n  const [pokemonStats, setPokemonStats] = pokemonStatsState;\n  const [userStats, setUserStats] = userStatsState;\n  const [animation, cycleAnimation] = animationState;\n  const {\n    name,\n    id,\n    height,\n    sprites: { front_default: img },\n    types: [\n      {\n        type: { name: type1 },\n      },\n    ],\n    type2,\n  } = pokemon;\n  //PS = PokemonStats\n  const { namePS, idPS, heightPS, imgPS, type1PS, type2PS } = pokemonStats;\n  const { guesses, totalHints, imageHints, correct, wrong } = userStats;\n  const {\n    handlePokemonStatsName,\n    handlePokemonStatsImg,\n    handlePokemonStatsId,\n    handlePokemonStatsHeight,\n    handlePokemonStatsTypes1,\n    handlePokemonStatsTypes2,\n  } = HandlePokemonStats();\n\n  const displayContainerVariants = {\n    animationOne: {\n      rotate: 360,\n      transition: {\n        duration: 0.3,\n      },\n    },\n    animationTwo: {\n      rotate: 0,\n      transition: {\n        duration: 0.3,\n      },\n    },\n  };\n  const capitalizeFirstLetter = (string) =>\n    string.charAt(0).toUpperCase() + string.slice(1);\n\n  return (\n    <>\n      <motion.div variants={displayContainerVariants} animate={animation}>\n        <Paper style={{ height: 230, marginBottom: 50 }}>\n          <Grid\n            container\n            direction=\"row\"\n            style={{ paddingTop: 55, marginTop: 70, marginBottom: 70 }}\n          >\n            <Grid item xs={9} container direction=\"row\" spacing={6}>\n              <Grid container>\n                <Grid item xs={2}></Grid>\n                <Grid item xs={4}>\n                  <Button\n                    size=\"small\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => {\n                      handlePokemonStatsId();\n                      setUserStats({\n                        ...userStats,\n                        totalHints: totalHints + 1,\n                      });\n                    }}\n                  >\n                    Id\n                  </Button>\n                </Grid>\n                <Grid container justify=\"flex-start\" item xs>\n                  <div>\n                    {idPS ? (\n                      <Typography align=\"center\">{id}</Typography>\n                    ) : (\n                      <Typography align=\"center\">...</Typography>\n                    )}\n                  </div>\n                </Grid>\n              </Grid>\n              <Grid container>\n                <Grid item xs={2}></Grid>\n                <Grid item xs={4}>\n                  <Button\n                    size=\"small\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => {\n                      setUserStats({\n                        ...userStats,\n                        totalHints: totalHints + 1,\n                      });\n                      handlePokemonStatsHeight();\n                    }}\n                  >\n                    Height\n                  </Button>\n                </Grid>\n                <Grid container justify=\"flex-start\" item xs>\n                  <div>\n                    {heightPS ? (\n                      <Typography align=\"center\">{height}</Typography>\n                    ) : (\n                      <Typography align=\"center\">...</Typography>\n                    )}\n                  </div>\n                </Grid>\n              </Grid>\n              <Grid container>\n                <Grid item xs={2}></Grid>\n                <Grid item xs={4}>\n                  <Button\n                    size=\"small\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => {\n                      setUserStats({\n                        ...userStats,\n                        totalHints: totalHints + 1,\n                      });\n                      handlePokemonStatsTypes1();\n                    }}\n                  >\n                    Type 1\n                  </Button>\n                </Grid>\n                <Grid container justify=\"flex-start\" item xs>\n                  <div>\n                    {type1PS ? (\n                      <Typography align=\"center\">\n                        {capitalizeFirstLetter(type1)}\n                      </Typography>\n                    ) : (\n                      <Typography align=\"center\">...</Typography>\n                    )}\n                  </div>\n                </Grid>\n              </Grid>\n              <Grid container>\n                <Grid item xs={2}></Grid>\n                <Grid item xs={4}>\n                  <Button\n                    size=\"small\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => {\n                      setUserStats({\n                        ...userStats,\n                        totalHints: totalHints + 1,\n                      });\n                      handlePokemonStatsTypes2();\n                    }}\n                  >\n                    Type 2\n                  </Button>\n                </Grid>\n                <Grid container justify=\"flex-start\" item xs>\n                  <div>\n                    {type2PS ? (\n                      <Typography align=\"center\">\n                        {capitalizeFirstLetter(type2)}\n                      </Typography>\n                    ) : (\n                      <Typography align=\"center\">...</Typography>\n                    )}\n                  </div>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item xs={3} container direction=\"row\">\n              <Grid\n                container\n                justify=\"flex-start\"\n                item\n                xs={12}\n                direction=\"column\"\n              >\n                <Button\n                  size=\"small\"\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={() => {\n                    setUserStats({\n                      ...userStats,\n                      imageHints: imageHints + 1,\n                      totalHints: totalHints + 1,\n                    });\n                    handlePokemonStatsImg();\n                  }}\n                >\n                  Img\n                </Button>\n              </Grid>\n              <Grid container justify=\"center\" item xs={12}>\n                {imgPS ? (\n                  <CardMedia\n                    style={{ height: 100, width: 100, margin: \"auto\" }}\n                    image={img}\n                  />\n                ) : (\n                  <Typography\n                    align=\"center\"\n                    style={{ height: 100, width: 100, margin: \"auto\" }}\n                  >\n                    ...\n                  </Typography>\n                )}\n              </Grid>\n            </Grid>\n          </Grid>\n        </Paper>\n      </motion.div>\n    </>\n  );\n}\n","import { useContext } from \"react\";\nimport PokemonContext from \"../context/pokemonContext\";\n\nexport default function HandlePokemonStats() {\n  const { pokemonState, pokemonStatsState } = useContext(PokemonContext);\n  const [pokemonStats, setPokemonStats] = pokemonStatsState;\n  //PS = PokemonStats\n  const { namePS, idPS, heightPS, imgPS, type1PS, type2PS } = pokemonStats;\n\n  const handlePokemonStatsName = () => {\n    setPokemonStats({ ...pokemonStats, namePS: true });\n  };\n  const handlePokemonStatsId = () => {\n    setPokemonStats({ ...pokemonStats, idPS: true });\n  };\n  const handlePokemonStatsHeight = () => {\n    setPokemonStats({ ...pokemonStats, heightPS: true });\n  };\n  const handlePokemonStatsImg = () => {\n    setPokemonStats({ ...pokemonStats, imgPS: true });\n  };\n  const handlePokemonStatsTypes1 = () => {\n    setPokemonStats({ ...pokemonStats, type1PS: true });\n  };\n  const handlePokemonStatsTypes2 = () => {\n    setPokemonStats({ ...pokemonStats, type2PS: true });\n  };\n\n  return {\n    handlePokemonStatsName,\n    handlePokemonStatsId,\n    handlePokemonStatsHeight,\n    handlePokemonStatsImg,\n    handlePokemonStatsTypes1,\n    handlePokemonStatsTypes2,\n  };\n}\n","import React, { useState, useContext } from \"react\";\nimport axios from \"axios\";\nimport { motion } from \"framer-motion\";\n\nconst fetchPokemon = (\n  pokemon,\n  setPokemon,\n  setPokemonStats,\n  setAllPokemon,\n  allPokemon,\n  url,\n  cycleAnimation\n) => {\n  const randomNumber = Math.floor(\n    Math.random() * (url.secondNumber - url.firstNumber + 1) + url.firstNumber\n  );\n  const fullUrl = `https://pokeapi.co/api/v2/pokemon/${randomNumber}`;\n  let correct = \"correct\";\n  axios.get(fullUrl).then((result) => {\n    const pokemonData = result.data;\n    if (pokemonData.types.length === 2) {\n      setPokemon({\n        ...pokemonData,\n        type2: pokemonData.types[1].type.name,\n      });\n    } else {\n      setPokemon({ ...pokemonData, type2: \"Only 1 type\" });\n    }\n    setPokemonStats({\n      namePS: false,\n      idPS: false,\n      heightPS: false,\n      imgPS: false,\n      type1PS: false,\n      type2PS: false,\n    });\n    cycleAnimation();\n  });\n};\nexport default fetchPokemon;\n","import React, { useState, useContext } from \"react\";\nimport PokemonContext from \"../context/pokemonContext\";\nimport fetchPokemon from \"../fetchPokemon/FetchPokemonData\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { motion } from \"framer-motion\";\nexport default function UserGuess() {\n  const {\n    pokemonState,\n    pokemonStatsState,\n    allPokemonState,\n    userGuessState,\n    userStatsState,\n    urlState,\n    animationState,\n  } = useContext(PokemonContext);\n  const [pokemon, setPokemon] = pokemonState;\n  const [pokemonStats, setPokemonStats] = pokemonStatsState;\n  const [allPokemon, setAllPokemon] = allPokemonState;\n  const [userGuess, setUserGuess] = userGuessState;\n  const [userStats, setUserStats] = userStatsState;\n  const [url, setUrl] = urlState;\n  const [animation, cycleAnimation] = animationState;\n\n  const { guesses, wrong, correct } = userStats;\n  const [correctGuess, setCorrectGuess] = useState(false);\n  const handleUserGuess = (event) => {\n    setUserGuess(event.target.value);\n  };\n  const handleCheckAnswer = () => {\n    if (userGuess) {\n      if (userGuess.toLowerCase() === pokemon.name) {\n        setCorrectGuess(true);\n        setUserStats({\n          ...userStats,\n          correct: correct + 1,\n          guesses: guesses + 1,\n        });\n        let pokedata = { ...pokemon, answer: \"correct\" };\n        setAllPokemon([pokedata, ...allPokemon]);\n        fetchPokemon(\n          pokemon,\n          setPokemon,\n          setPokemonStats,\n          setAllPokemon,\n          allPokemon,\n          url\n        );\n        cycleAnimation();\n        setUserGuess(\"\");\n      } else {\n        setCorrectGuess(false);\n        setUserStats({ ...userStats, wrong: wrong + 1, guesses: guesses + 1 });\n      }\n    }\n  };\n  return (\n    <div>\n      <Grid\n        style={{ marginBottom: 50 }}\n        container\n        justify=\"center\"\n        alignItems=\"center\"\n        spacing={2}\n      >\n        <Grid item>\n          <TextField\n            label=\"Who's that pokemon?\"\n            variant=\"outlined\"\n            onChange={handleUserGuess}\n            type=\"text\"\n            value={userGuess}\n          />\n        </Grid>\n        <Grid item>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={() => {\n              handleCheckAnswer();\n            }}\n          >\n            Submit\n          </Button>\n        </Grid>\n      </Grid>\n      {/* <div>\n        <div>{correctGuess ? <div>Correct!</div> : <br />}</div>\n      </div> */}\n    </div>\n  );\n}\n","import React, { useContext } from \"react\";\nimport PokemonContext from \"../context/pokemonContext\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport Switch from \"@material-ui/core/Switch\";\nimport zIndex from \"@material-ui/core/styles/zIndex\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { motion } from \"framer-motion\";\n\nexport default function AllPokemon() {\n  const { allPokemonState } = useContext(PokemonContext);\n  const [allPokemon, setAllPokemon] = allPokemonState;\n  const [checked, setChecked] = React.useState(true);\n  const handleChange = () => {\n    setChecked((prev) => !prev);\n  };\n\n  function capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  }\n  return (\n    <div>\n      <FormControlLabel\n        control={<Switch checked={checked} onChange={handleChange} />}\n        label=\"Show previous pokemon\"\n      />\n      <Grid container justify=\"center\" component=\"div\">\n        {allPokemon.map((pokemon, index) => (\n          <Grid key={index} item>\n            <Collapse in={checked}>\n              <Paper\n                className={pokemon.answer}\n                elevation={3}\n                style={{ margin: 10 }}\n              >\n                <Typography align=\"center\">\n                  {capitalizeFirstLetter(pokemon.name)}\n                </Typography>\n                <CardMedia\n                  style={{ height: 100, width: 100, margin: \"auto\" }}\n                  image={pokemon.sprites.front_default}\n                />\n              </Paper>\n            </Collapse>\n          </Grid>\n        ))}\n      </Grid>\n    </div>\n  );\n}\n","import React, { useContext, useState } from \"react\";\nimport PokemonContext from \"../context/pokemonContext\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Switch from \"@material-ui/core/Switch\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  marginBottom: {\n    marginBottom: 100,\n  },\n  start: {\n    marginBottom: 50,\n  },\n}));\nexport default function SelectGeneration() {\n  const { urlState } = useContext(PokemonContext);\n  const [url, setUrl] = urlState;\n  const [checked, setChecked] = useState();\n  const [currentGen, setCurrentGen] = useState(\"Generation 1 is active\");\n  const handleChange = () => {\n    setChecked((prev) => !prev);\n  };\n  const handleWhichGeneration = (minNumber, maxNumber) => {\n    setUrl({ firstNumber: minNumber, secondNumber: maxNumber });\n  };\n  const handleSwitchGen = (generation) => {\n    setCurrentGen(`${generation} is active`);\n  };\n\n  const classes = useStyles();\n  return (\n    <div className={classes.start}>\n      <FormControlLabel\n        control={<Switch checked={checked} onChange={handleChange} />}\n        label=\"Switch generation\"\n      />\n      <Collapse in={checked}>\n        <Grid\n          container\n          justify=\"center\"\n          spacing={3}\n          className={classes.marginBottom}\n        >\n          <Grid item>\n            <Typography align=\"center\" component=\"h1\" variant=\"h4\">\n              Which generation is your favorite?\n            </Typography>\n          </Grid>\n          <Grid item>\n            <Button\n              onClick={() => {\n                handleWhichGeneration(1, 151);\n                handleSwitchGen(\"Generation 1\");\n              }}\n              variant=\"contained\"\n              size=\"small\"\n              color=\"primary\"\n            >\n              Gen 1\n            </Button>\n          </Grid>\n          <Grid item>\n            <Button\n              onClick={() => {\n                handleWhichGeneration(152, 251);\n                handleSwitchGen(\"Generation 2\");\n              }}\n              variant=\"contained\"\n              size=\"small\"\n              color=\"primary\"\n            >\n              Gen 2\n            </Button>\n          </Grid>\n          <Grid item>\n            <Button\n              onClick={() => {\n                handleWhichGeneration(252, 386);\n                handleSwitchGen(\"Generation 3\");\n              }}\n              variant=\"contained\"\n              size=\"small\"\n              color=\"primary\"\n            >\n              Gen 3\n            </Button>\n          </Grid>\n          <Grid item>\n            <Button\n              onClick={() => {\n                handleWhichGeneration(387, 493);\n                handleSwitchGen(\"Generation 4\");\n              }}\n              variant=\"contained\"\n              size=\"small\"\n              color=\"primary\"\n            >\n              Gen 4\n            </Button>\n          </Grid>\n          <Grid item>\n            <Button\n              onClick={() => {\n                handleWhichGeneration(494, 649);\n                handleSwitchGen(\"Generation 5\");\n              }}\n              variant=\"contained\"\n              size=\"small\"\n              color=\"primary\"\n            >\n              Gen 5\n            </Button>\n          </Grid>\n          <Grid item>\n            <Button\n              onClick={() => {\n                handleWhichGeneration(650, 721);\n                handleSwitchGen(\"Generation 6\");\n              }}\n              variant=\"contained\"\n              size=\"small\"\n              color=\"primary\"\n            >\n              Gen 6\n            </Button>\n          </Grid>\n          <Grid item>\n            <Button\n              onClick={() => {\n                handleWhichGeneration(722, 809);\n                handleSwitchGen(\"Generation 7\");\n              }}\n              variant=\"contained\"\n              size=\"small\"\n              color=\"primary\"\n            >\n              Gen 7\n            </Button>\n          </Grid>\n          <Grid item>\n            <Button\n              onClick={() => {\n                handleWhichGeneration(810, 898);\n                handleSwitchGen(\"Generation 8\");\n              }}\n              variant=\"contained\"\n              size=\"small\"\n              color=\"primary\"\n            >\n              Gen 8\n            </Button>\n          </Grid>\n          <Grid item xs={12}>\n            <Typography align=\"center\">{currentGen}</Typography>\n          </Grid>\n        </Grid>\n      </Collapse>\n    </div>\n  );\n}\n","import React, { useContext } from \"react\";\nimport PokemonContext from \"../context/pokemonContext\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Switch from \"@material-ui/core/Switch\";\nimport Collapse from \"@material-ui/core/Collapse\";\n\nimport { Bar } from \"react-chartjs-2\";\nexport default function BarChart() {\n  const { userStatsState, allPokemonState } = useContext(PokemonContext);\n  const [userStats, setUserStats] = userStatsState;\n  const [allPokemon, setAllPokemon] = allPokemonState;\n  const { guesses, totalHints, imageHints, correct, wrong } = userStats;\n  const [checked, setChecked] = React.useState(false);\n\n  const handleChange = () => {\n    setChecked((prev) => !prev);\n  };\n  const data = {\n    labels: [\n      \"Guesses\",\n      \"Wrong guesses\",\n      \"Correct guesses\",\n      \"Total hints\",\n      \"Image hints\",\n      \"Total pokemon\",\n    ],\n    datasets: [\n      {\n        axis: \"y\",\n        label: \"My statistics\",\n        backgroundColor: [\n          \"rgba(255, 99, 132, 0.2)\",\n          \"rgba(255, 159, 64, 0.2)\",\n          \"rgba(255, 205, 86, 0.2)\",\n          \"rgba(75, 192, 192, 0.2)\",\n          \"rgba(54, 162, 235, 0.2)\",\n          \"rgba(153, 102, 255, 0.2)\",\n        ],\n        borderColor: [\n          \"rgb(255, 99, 132)\",\n          \"rgb(255, 159, 64)\",\n          \"rgb(255, 205, 86)\",\n          \"rgb(75, 192, 192)\",\n          \"rgb(54, 162, 235)\",\n          \"rgb(153, 102, 255)\",\n        ],\n        borderWidth: 1,\n        data: [\n          guesses,\n          wrong,\n          correct,\n          totalHints,\n          imageHints,\n          allPokemon.length,\n        ],\n      },\n    ],\n  };\n  return (\n    <div>\n      <FormControlLabel\n        control={<Switch checked={checked} onChange={handleChange} />}\n        label=\"Show statistics chart\"\n      />\n      <Collapse in={checked}>\n        <Bar data={data} />\n      </Collapse>\n    </div>\n  );\n}\n","import \"./css/app.css\";\nimport React, { useState } from \"react\";\nimport Hints from \"./components/hints/Hints\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { PokemonProvider } from \"./components/context/pokemonContext\";\nimport DisplayPokemon from \"./components/displayPokemon/DisplayPokemon\";\nimport fetchPokemon from \"./components/fetchPokemon/FetchPokemonData\";\nimport UserGuess from \"./components/quessfield/UserGuess\";\nimport AllPokemon from \"./components/allPokemon/AllPokemon\";\nimport SelectGeneration from \"./components/selectGeneration/SelectGeneration\";\nimport Container from \"@material-ui/core/Container\";\nimport Chart from \"./components/chart/Chart\";\nimport BarChart from \"./components/chart/BarChart\";\nimport { motion, useCycle } from \"framer-motion\";\n\nexport default function App() {\n  const [animation, cycleAnimation] = useCycle(\"animationOne\", \"animationTwo\");\n  const [url, setUrl] = useState({ firstNumber: 1, secondNumber: 151 });\n  const [userGuess, setUserGuess] = useState();\n  const [userStats, setUserStats] = useState({\n    guesses: 0,\n    totalHints: 0,\n    imageHints: 0,\n    correct: 0,\n    wrong: 0,\n  });\n  const [startGame, setStartGame] = useState(false);\n  const [allPokemon, setAllPokemon] = useState([]);\n  const [pokemonStats, setPokemonStats] = useState({\n    namePS: false,\n    idPS: false,\n    heightPS: false,\n    imgPS: false,\n    type1PS: false,\n    type2PS: false,\n  });\n  const [pokemon, setPokemon] = useState({\n    name: \"\",\n    id: \"\",\n    height: \"\",\n    types: [\n      {\n        type: {\n          name: \"\",\n        },\n      },\n      {\n        type: {\n          name: \"Only 1 type\",\n        },\n      },\n    ],\n    sprites: {\n      front_default: \"\",\n    },\n  });\n  return (\n    <div>\n      <PokemonProvider\n        value={{\n          pokemonState: [pokemon, setPokemon],\n          pokemonStatsState: [pokemonStats, setPokemonStats],\n          userGuessState: [userGuess, setUserGuess],\n          allPokemonState: [allPokemon, setAllPokemon],\n          userStatsState: [userStats, setUserStats],\n          urlState: [url, setUrl],\n          animationState: [animation, cycleAnimation],\n        }}\n      >\n        <Container maxWidth=\"sm\">\n          <Grid container justify=\"center\" spacing={4}>\n            {startGame ? (\n              <Grid item>\n                <Button\n                  component={motion.div}\n                  whileTap={{ scale: 1.2 }}\n                  size=\"large\"\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  onClick={() => {\n                    let pokedata = { ...pokemon, answer: \"wrong\" };\n                    fetchPokemon(\n                      pokemon,\n                      setPokemon,\n                      setPokemonStats,\n                      setAllPokemon,\n                      allPokemon,\n                      url,\n                      cycleAnimation\n                    );\n                    setAllPokemon([pokedata, ...allPokemon]);\n                  }}\n                >\n                  Next pokemon\n                </Button>\n              </Grid>\n            ) : (\n              <Grid item>\n                <Button\n                  size=\"large\"\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  onClick={() => {\n                    setStartGame(true);\n                    fetchPokemon(\n                      pokemon,\n                      setPokemon,\n                      setPokemonStats,\n                      setAllPokemon,\n                      allPokemon,\n                      url,\n                      cycleAnimation\n                    );\n                  }}\n                >\n                  Start\n                </Button>\n              </Grid>\n            )}\n          </Grid>\n\n          <Hints />\n          <DisplayPokemon />\n          <UserGuess />\n          <AllPokemon />\n          <BarChart />\n          <SelectGeneration />\n        </Container>\n      </PokemonProvider>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}